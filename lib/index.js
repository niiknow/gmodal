// Generated by CoffeeScript 1.9.2
var Emitter, domify, gmodal, modal, win;

Emitter = require('emitter');

domify = require('domify');

win = window;


/**
 * modal
 */

modal = (function() {
  function modal() {}

  modal.prototype.doc = win.document;

  modal.prototype.elWrapper = null;

  modal.prototype.el = null;

  modal.prototype.options = {};

  modal.prototype.baseCls = 'gmodal';

  modal.prototype.closeCls = 'gmodal-close';

  modal.prototype.tpl = '<div class="gmodal-wrap gmodal-left"></div><div class="gmodal-content" id="gmodalContent"></div><div class="gmodal-wrap gmodal-right"></div>';

  modal.prototype.css = '.gmodal{display:none;overflow:hidden;outline:0;-webkit-overflow-scrolling:touch;position:fixed;top:0;left:0;bottom:0;right:0;width:100%;height:100%;z-index:9999990;padding-top:50px}.body-gmodal .gmodal{display:table}.body-gmodal{overflow:hidden}.gmodal-content,.gmodal-wrap{display:table-cell}.gmodal-left,.gmodal-right{width:50%}';

  modal.prototype.show = function(options) {
    var eCls, self;
    self = this;
    self.elWrapper = self.createModal();
    if (!self.el) {
      self.el = self.doc.getElementById("gmodalContent");
    }
    if ((options != null)) {
      self.options = options;
      if ((self.options.content != null)) {
        while (self.el.firstChild) {
          self.el.removeChild(self.el.firstChild);
        }
        if (typeof self.options.content === 'string') {
          self.el.appendChild(domify(self.options.content));
        } else {
          self.el.appendChild(self.options.content);
        }
        self.options.content = null;
      }
    }
    if (!self.options) {
      return self;
    }
    if (self.options.closeCls) {
      self.closeCls = self.options.closeCls;
    }
    self.elWrapper.style.display = self.elWrapper.style.visibility = "";
    self.elWrapper.className = (self.baseCls + " ") + (self.options.cls || '');
    eCls = self.doc.getElementsByTagName('body')[0].className;
    self.doc.getElementsByTagName('body')[0].className = eCls + " body-gmodal";
    self.emit('show');
    return this;
  };

  modal.prototype.hide = function() {
    var eCls, self;
    self = this;
    if (!self.elWrapper) {
      return self;
    }
    self.elWrapper.className = "" + self.baseCls;
    eCls = self.doc.getElementsByTagName('body')[0].className;
    self.doc.getElementsByTagName('body')[0].className = eCls.replace(/\s+body\-gmodal/gi, '');
    self.emit('hide');
    return this;
  };

  modal.prototype.injectStyle = function(id, data) {
    var el, self;
    self = this;
    el = self.doc.getElementById(id);
    if (!el) {
      el = self.doc.createElement('style');
      el.id = id;
      el.type = 'text/css';
      if (el.styleSheet) {
        el.styleSheet.cssText = data;
      } else {
        el.appendChild(self.doc.createTextNode(data));
      }
      (self.doc.head || self.doc.getElementsByTagName('head')[0]).appendChild(el);
    }
    return this;
  };

  modal.prototype.hasCls = function(el, cls) {
    var i, k, len, ref, v;
    ref = cls.split(' ');
    for (k = i = 0, len = ref.length; i < len; k = ++i) {
      v = ref[k];
      if ((' ' + el.className).indexOf(' ' + v) >= 0) {
        return true;
      }
    }
    return false;
  };

  modal.prototype.checkEvent = function(name, evt, el) {
    var scls, self, tg;
    self = this;
    evt = evt || win.event;
    tg = evt.target || evt.srcElement;
    if (tg.nodeType === 3) {
      tg = tg.parentNode;
    }
    if (self.hasCls(tg.parentNode, "" + self.closeCls)) {
      tg = tg.parentNode;
    }
    scls = "gmodal-wrap " + self.closeCls;
    if (name === 'click') {
      if (self.hasCls(tg, scls) || tg === el) {
        self.emit('click', evt);
      }
    } else if (name === 'keypress') {
      if (self.hasCls(tg, scls) || tg === el || tg === sel.doc || tg === self.doc.body) {
        if ((evt.which || evt.keyCode) === 27) {
          self.emit('esc', evt);
        }
      }
    } else if (name === 'tap') {
      if (self.hasCls(tg, scls) || tg === el) {
        self.emit('tap', evt);
      }
    }
    return false;
  };

  modal.prototype.createModal = function() {
    var el, myKeypress, oldkp, self;
    self = this;
    el = self.doc.getElementById("gmodal");
    if (!el) {
      self.injectStyle('gmodal-css', self.css);
      el = self.doc.createElement('div');
      el.id = 'gmodal';
      el.onclick = function(evt) {
        return self.checkEvent('click', evt, el);
      };
      myKeypress = function(evt) {
        return self.checkEvent('keypress', evt, el);
      };
      el.onkeypress = myKeypress;
      if (typeof self.doc.onkeypress === 'function') {
        oldkp = self.doc.onkeypress;
        self.doc.onkeypress = function(evt) {
          oldkp(evt);
          return myKeypress(evt);
        };
      } else {
        self.doc.onkeypress = myKeypress;
      }
      el.ontap = function(evt) {
        return self.checkEvent('tap', evt, el);
      };
      el.appendChild(domify(self.tpl));
      self.doc.getElementsByTagName('body')[0].appendChild(el);
    }
    return el;
  };

  return modal;

})();

Emitter(modal.prototype);

gmodal = new modal();

win.gmodal = gmodal;

module.exports = gmodal;
