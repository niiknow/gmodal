// Generated by CoffeeScript 1.10.0
var Emitter, checkEvent, createModal, domify, gmodal, hideModalInternal, modal, modals, showModalInternal, trim, win;

Emitter = require('emitter');

domify = require('domify');

trim = require('trim');

win = window.self || window;

gmodal = win.gmodal;

modals = [];

checkEvent = function(self, name, evt, el) {
  var myEvt, scls, tg;
  evt = evt || win.event;
  tg = evt.target || evt.srcElement;
  if (tg.nodeType === 3) {
    tg = tg.parentNode;
  }
  if (self.hasCls(tg.parentNode, "" + self.closeCls)) {
    tg = tg.parentNode;
  }
  scls = "gmodal-container gmodal-wrap";
  if (name === 'click') {
    if (self.hasCls(tg, scls) || tg === el) {
      self.emit('click', tg, evt);
    }
  } else if (name === 'keypress') {
    if (self.hasCls(tg, scls) || tg === el || tg === self.doc || tg === self.doc.body) {
      if ((evt.which || evt.keyCode) === 27) {
        self.emit('esc', tg, evt);
      }
    }
  } else if (name === 'tap') {
    if (self.hasCls(tg, scls) || tg === el) {
      self.emit('tap', tg, evt);
    }
  }
  if (self.hasCls(tg, "" + self.closeCls)) {
    myEvt = {
      cancel: false
    };
    self.emit('close', myEvt, tg, evt);
    if (!myEvt.cancel) {
      hideModalInternal(self);
    }
  }
  return true;
};

createModal = function(self) {
  var el, myKeypress, oldkp;
  el = self.doc.getElementById("gmodal");
  if (!el) {
    self.injectStyle('gmodalcss', self.css);
    el = self.doc.createElement('div');
    el.id = 'gmodal';
    el.onclick = function(evt) {
      return checkEvent(self, 'click', evt, el);
    };
    myKeypress = function(evt) {
      return checkEvent(self, 'keypress', evt, el);
    };
    el.onkeypress = myKeypress;
    if (typeof self.doc.onkeypress === 'function') {
      oldkp = self.doc.onkeypress;
      self.doc.onkeypress = function(evt) {
        oldkp(evt);
        return myKeypress(evt);
      };
    } else {
      self.doc.onkeypress = myKeypress;
    }
    el.ontap = function(evt) {
      return checkEvent(self, 'tap', evt, el);
    };
    el.appendChild(domify(self.tpl));
    self.doc.getElementsByTagName('body')[0].appendChild(el);
  }
  return el;
};

showModalInternal = function(self, opts) {
  var body, eCls, i, len, ref, v;
  self.isVisible = true;
  if ((opts != null)) {
    self.opts = opts;
    if ((self.opts.content != null)) {
      while (self.el.firstChild) {
        self.el.removeChild(self.el.firstChild);
      }
      if (typeof self.opts.content === 'string') {
        self.el.appendChild(domify(self.opts.content));
      } else {
        self.el.appendChild(self.opts.content);
      }
      self.opts.content = null;
    }
  }
  self.closeCls = self.opts.closeCls || self.closeCls;
  if (!self.opts.disableScrollTop) {
    win.scrollTo(0, 0);
  }
  self.elWrapper.style.display = self.elWrapper.style.visibility = "";
  self.elWrapper.className = trim((self.baseCls + " ") + (self.opts.cls || ''));
  body = self.doc.getElementsByTagName('html')[0];
  eCls = body.className;
  body.className = trim(eCls + " html-gmodal");
  setTimeout(function() {
    self.emit('show-timeout', self);
    self.el.className = trim((" " + self.el.className + " ").replace(' in ', '') + ' in');
  }, self.opts.timeout || 50);
  if (self.opts.hideOn) {
    self.opts._autoHideHandler = function() {
      return hideModalInternal(self);
    };
    ref = self.opts.hideOn.split(',');
    for (i = 0, len = ref.length; i < len; i++) {
      v = ref[i];
      if (v === 'esc' || v === 'click' || v === 'tap') {
        self.on(v, self.opts._autoHideHandler);
      }
    }
  }
  self.emit('show', self);
  return self;
};

hideModalInternal = function(self) {
  self.elWrapper.className = "" + self.baseCls;
  self.el.className = 'gmodal-wrap gmodal-content';
  setTimeout(function() {
    var eCls;
    eCls = self.doc.getElementsByTagName('html')[0].className;
    self.doc.getElementsByTagName('html')[0].className = trim(eCls.replace(/html\-gmodal/gi, ''));
    self.isVisible = false;
    self.emit('hide', self);
    if (typeof self.opts.hideCallback === 'function') {
      self.opts.hideCallback(self);
    }
    if (self.opts._autoHideHandler) {
      self.off('esc', self.opts._autoHideHandler);
      self.off('click', self.opts._autoHideHandler);
      self.off('tap', self.opts._autoHideHandler);
    }
    if (modals.length !== 0) {
      return self.show();
    }
  }, self.opts.timeout || 50);
  return self;
};


/**
 * modal
 */

modal = (function() {
  function modal() {}

  modal.prototype.doc = win.document;

  modal.prototype.ishim = null;

  modal.prototype.elWrapper = null;

  modal.prototype.el = null;

  modal.prototype.opts = {};

  modal.prototype.baseCls = 'gmodal';

  modal.prototype.closeCls = 'gmodal-close';

  modal.prototype.tpl = '<div class="gmodal-container"><div class="gmodal-wrap gmodal-left"></div><div class="gmodal-wrap gmodal-content" id="gmodalContent"></div><div class="gmodal-wrap gmodal-right"></div></div>';

  modal.prototype.css = '.gmodal{display:none;overflow:hidden;outline:0;-webkit-overflow-scrolling:touch;position:fixed;top:0;left:0;width:100%;height:200%;z-index:9999990}.gmodal .frameshim{position:absolute;display:block;visibility:hidden;width:100%;height:100%;margin:0;top:0;left:0;border:none;z-index:-999}.html-gmodal body .gmodal{display:block}.html-gmodal,.html-modal body{overflow:hidden;margin:0;padding:0;height:100%;width:100%}.gmodal-container{display:table;position:relative;width:100%;height:50%}.gmodal-wrap{display:table-cell;position:relative;vertical-align:middle}.gmodal-left,.gmodal-right{width:50%}';


  /**
   * show or open modal
   * @param  {[Object}  opts   options
   * @param  {Function} hideCb callback function on hide
   * @return {Object}
   */

  modal.prototype.show = function(opts, hideCb) {
    var ref, self;
    self = this;
    if (!((ref = self.doc) != null ? ref.body : void 0)) {
      return false;
    }
    self.elWrapper = createModal(self);
    if (!self.el) {
      self.el = self.doc.getElementById("gmodalContent");
    }
    if (opts) {
      opts.hideCallback = hideCb;
      modals.push(opts);
    }
    if (!!self.isVisible) {
      return false;
    }
    if (modals.length > 0) {
      opts = modals.shift();
    }
    if (!opts) {
      return false;
    }
    showModalInternal(self, opts);
    return self;
  };


  /**
   * hide or close modal
   * @return {Object}
   */

  modal.prototype.hide = function() {
    var self;
    self = this;
    if (!self.elWrapper) {
      return self;
    }
    if (!!self.opts) {
      hideModalInternal(self);
    }
    return self;
  };


  /**
   * Helper method to inject your own css
   * @param  {string} id  css id
   * @param  {string} css the css text
   * @return {Object}
   */

  modal.prototype.injectStyle = function(id, css) {
    var el, elx, self;
    self = this;
    el = self.doc.getElementById(id);
    if (!el) {
      el = self.doc.createElement('style');
      el.id = id;
      el.type = 'text/css';
      if (el.styleSheet) {
        el.styleSheet.cssText = css;
      } else {
        el.appendChild(self.doc.createTextNode(css));
      }
      elx = self.doc.getElementsByTagName('link')[0];
      elx = elx || (self.doc.head || self.doc.getElementsByTagName('head')[0]).lastChild;
      elx.parentNode.insertBefore(el, elx);
    }
    return self;
  };


  /**
   * helper method to determine if an element has class
   * @param  {HTMLElement}  el  
   * @param  {string}       cls class names
   * @return {Boolean}
   */

  modal.prototype.hasCls = function(el, cls) {
    var i, k, len, ref, v;
    ref = cls.split(' ');
    for (k = i = 0, len = ref.length; i < len; k = ++i) {
      v = ref[k];
      if ((' ' + el.className + ' ').indexOf(' ' + v + ' ') >= 0) {
        return true;
      }
    }
    return false;
  };


  /**
   * append an iframe shim for older IE
   * WARNING: this is only for stupid older IE bug
   * do not use with modern browser or site with ssl
   * @return {Object}
   */

  modal.prototype.iShimmy = function() {
    var self;
    self = this;
    if ((self.elWrapper != null) && !self.shim) {
      self.ishim = self.doc.createElement('iframe');
      self.ishim.className = 'iframeshim';
      self.ishim.scrolling = 'no';
      self.ishim.frameborder = 0;
      self.ishim.height = '100';
      self.ishim.width = '100';
      self.elWrapper.appendChild(self.ishim);
    }
    return self;
  };

  return modal;

})();

if (!gmodal) {
  Emitter(modal.prototype);
  gmodal = new modal();
  win.gmodal = gmodal;
}

module.exports = gmodal;
